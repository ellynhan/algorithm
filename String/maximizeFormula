#include <string>
#include <vector>
#include <algorithm>

using namespace std;

long long solution(string expression) {
    long long answer = 0;
    char op[3]={'+','-','*'};
    for(int i=0; i<5; i++){
        string exp = expression;
        for(int j=0; j<3; j++){
            for(int k=0; k<exp.length(); k++){
                if(exp[k]==op[j]){
                    int posBefore = k-1;
                    int posAfter = k+1;
                    while(exp[posBefore]>='0'&&exp[posBefore]<='9'){
                        posBefore--;
                    }
                    while(exp[posAfter]>='0'&&exp[posAfter]<='9'){
                        posAfter++;
                    }
                    if((posBefore>=1&&exp[posBefore-1]<'0'||exp[posBefore-1]>'9')||posBefore==0){
                        posBefore--;
                    }
                    if(posAfter==k+1){
                        posAfter++;
                        while(exp[posAfter]>='0'&&exp[posAfter]<='9'){
                            posAfter++;
                        }
                    }
                    string previousPart = exp.substr(0,posBefore+1);
                    string nextPart = exp.substr(posAfter,exp.length()-posAfter);
                    long long operand1 = stoll(exp.substr(posBefore+1,k-posBefore-1));
                    long long operand2 = stoll(exp.substr(k+1,posAfter-k-1));
                    long long compute;
                    
                    if(op[j]=='-'){
                        compute = operand1-operand2;
                    }else if(op[j]=='+'){
                        compute = operand1+operand2;
                    }else{
                        compute = operand1*operand2;
                    }
                    exp = previousPart+to_string(compute)+nextPart;
                    k=posBefore+to_string(compute).length();
                }
            }
        }
        long long result = stoll(exp);
        if(result<0)result*=-1; 
        answer = answer>result ?answer:result;
        next_permutation(op,op+3);
    }
    return answer;
}
